// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"sync"

	"github.com/cloudfoundry/dns-release/src/dns/nameserverconfig/handler"
)

type FakeHandler struct {
	ApplyStub        func() error
	applyMutex       sync.RWMutex
	applyArgsForCall []struct{}
	applyReturns     struct {
		result1 error
	}
	applyReturnsOnCall map[int]struct {
		result1 error
	}
	IsCorrectStub        func() (bool, error)
	isCorrectMutex       sync.RWMutex
	isCorrectArgsForCall []struct{}
	isCorrectReturns     struct {
		result1 bool
		result2 error
	}
	isCorrectReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandler) Apply() error {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct{}{})
	fake.recordInvocation("Apply", []interface{}{})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.applyReturns.result1
}

func (fake *FakeHandler) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeHandler) ApplyReturns(result1 error) {
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHandler) ApplyReturnsOnCall(i int, result1 error) {
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHandler) IsCorrect() (bool, error) {
	fake.isCorrectMutex.Lock()
	ret, specificReturn := fake.isCorrectReturnsOnCall[len(fake.isCorrectArgsForCall)]
	fake.isCorrectArgsForCall = append(fake.isCorrectArgsForCall, struct{}{})
	fake.recordInvocation("IsCorrect", []interface{}{})
	fake.isCorrectMutex.Unlock()
	if fake.IsCorrectStub != nil {
		return fake.IsCorrectStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.isCorrectReturns.result1, fake.isCorrectReturns.result2
}

func (fake *FakeHandler) IsCorrectCallCount() int {
	fake.isCorrectMutex.RLock()
	defer fake.isCorrectMutex.RUnlock()
	return len(fake.isCorrectArgsForCall)
}

func (fake *FakeHandler) IsCorrectReturns(result1 bool, result2 error) {
	fake.IsCorrectStub = nil
	fake.isCorrectReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeHandler) IsCorrectReturnsOnCall(i int, result1 bool, result2 error) {
	fake.IsCorrectStub = nil
	if fake.isCorrectReturnsOnCall == nil {
		fake.isCorrectReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isCorrectReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.isCorrectMutex.RLock()
	defer fake.isCorrectMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.Handler = new(FakeHandler)
