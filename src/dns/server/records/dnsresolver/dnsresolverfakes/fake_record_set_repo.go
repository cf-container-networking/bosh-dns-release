// This file was generated by counterfeiter
package dnsresolverfakes

import (
	"sync"

	"github.com/cloudfoundry/dns-release/src/dns/server/records"
	"github.com/cloudfoundry/dns-release/src/dns/server/records/dnsresolver"
)

type FakeRecordSetRepo struct {
	GetStub        func() (records.RecordSet, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct{}
	getReturns     struct {
		result1 records.RecordSet
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 records.RecordSet
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRecordSetRepo) Get() (records.RecordSet, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct{}{})
	fake.recordInvocation("Get", []interface{}{})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *FakeRecordSetRepo) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeRecordSetRepo) GetReturns(result1 records.RecordSet, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 records.RecordSet
		result2 error
	}{result1, result2}
}

func (fake *FakeRecordSetRepo) GetReturnsOnCall(i int, result1 records.RecordSet, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 records.RecordSet
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 records.RecordSet
		result2 error
	}{result1, result2}
}

func (fake *FakeRecordSetRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRecordSetRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dnsresolver.RecordSetRepo = new(FakeRecordSetRepo)
