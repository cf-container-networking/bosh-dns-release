// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"sync"

	"github.com/cloudfoundry/dns-release/src/dns/server/handlers"
	"github.com/cloudfoundry/dns-release/src/dns/server/records/dnsresolver"
	"github.com/miekg/dns"
)

type FakeDomainResolver struct {
	ResolveStub        func(aliasDomains []string, protocol dnsresolver.Protocol, requestMsg *dns.Msg) *dns.Msg
	resolveMutex       sync.RWMutex
	resolveArgsForCall []struct {
		aliasDomains []string
		protocol     dnsresolver.Protocol
		requestMsg   *dns.Msg
	}
	resolveReturns struct {
		result1 *dns.Msg
	}
	resolveReturnsOnCall map[int]struct {
		result1 *dns.Msg
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDomainResolver) Resolve(aliasDomains []string, protocol dnsresolver.Protocol, requestMsg *dns.Msg) *dns.Msg {
	var aliasDomainsCopy []string
	if aliasDomains != nil {
		aliasDomainsCopy = make([]string, len(aliasDomains))
		copy(aliasDomainsCopy, aliasDomains)
	}
	fake.resolveMutex.Lock()
	ret, specificReturn := fake.resolveReturnsOnCall[len(fake.resolveArgsForCall)]
	fake.resolveArgsForCall = append(fake.resolveArgsForCall, struct {
		aliasDomains []string
		protocol     dnsresolver.Protocol
		requestMsg   *dns.Msg
	}{aliasDomainsCopy, protocol, requestMsg})
	fake.recordInvocation("Resolve", []interface{}{aliasDomainsCopy, protocol, requestMsg})
	fake.resolveMutex.Unlock()
	if fake.ResolveStub != nil {
		return fake.ResolveStub(aliasDomains, protocol, requestMsg)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.resolveReturns.result1
}

func (fake *FakeDomainResolver) ResolveCallCount() int {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return len(fake.resolveArgsForCall)
}

func (fake *FakeDomainResolver) ResolveArgsForCall(i int) ([]string, dnsresolver.Protocol, *dns.Msg) {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return fake.resolveArgsForCall[i].aliasDomains, fake.resolveArgsForCall[i].protocol, fake.resolveArgsForCall[i].requestMsg
}

func (fake *FakeDomainResolver) ResolveReturns(result1 *dns.Msg) {
	fake.ResolveStub = nil
	fake.resolveReturns = struct {
		result1 *dns.Msg
	}{result1}
}

func (fake *FakeDomainResolver) ResolveReturnsOnCall(i int, result1 *dns.Msg) {
	fake.ResolveStub = nil
	if fake.resolveReturnsOnCall == nil {
		fake.resolveReturnsOnCall = make(map[int]struct {
			result1 *dns.Msg
		})
	}
	fake.resolveReturnsOnCall[i] = struct {
		result1 *dns.Msg
	}{result1}
}

func (fake *FakeDomainResolver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDomainResolver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.DomainResolver = new(FakeDomainResolver)
